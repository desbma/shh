// Pest grammar for strace output (some stuff only works with our strace output arguments)

// Line formats

syscall_line = {
	syscall_line_complete |
	syscall_line_start |
	syscall_line_end
}
syscall_line_complete = { SOI ~ pid ~ " "+ ~ rel_ts ~ " " ~ name ~ "(" ~  arguments ~ ") " ~ " "* ~ "= " ~ ret_val ~ EOI }
syscall_line_start = { SOI ~ pid ~ " "+ ~ rel_ts ~ " " ~ name ~ "(" ~  arguments ~ " <unfinished ...>" ~ EOI }
syscall_line_end = { SOI ~ pid ~ " "+ ~ rel_ts ~ " <... " ~ name ~ " resumed> ) " ~ " "* ~ "= " ~ ret_val ~ EOI }


// Main line tokens

pid = { ASCII_DIGIT+ }

rel_ts = { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

name = { symbol_name }

arguments = {
	named_arguments |
	unnamed_arguments
}

ret_val = { int ~ (" " ~ ANY*)? }


// Subrules

named_affectation = { symbol_name ~ "=" ~ expression }
named_arguments = { named_affectation ~ (", " ~ named_affectation)* }
unnamed_arguments = { (argument ~ (", " ~ argument)*)? }

argument = {
	in_out_argument |
	in_argument
}
in_argument = { expression }
in_out_argument = {
	("[" ~ expression ~ " => " ~ expression ~ "]" ) |
	(expression ~ " => " ~ expression)
}

expression = {
	(
		macro |
		int |
		struct |
		buffer |
		set |
		array
	) ~
	comment?
}

symbol_name = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
comment = { " /* " ~ (!" */" ~ ANY)+ ~ " */" }

int = {
	or |
	multiplication |
	left_bit_shift |
	literal_int |
	named_constant
}
literal_int = {
	literal_int_oct |
	literal_int_hex |
	literal_int_dec
}
or = { named_constant ~ ("|" ~ int)+ }
left_bit_shift = { literal_int ~ "<<" ~ int }
multiplication = { literal_int ~ ("*" ~ int)+ }
named_constant = { symbol_name ~ metadata? }

literal_int_oct = { "0" ~ ASCII_OCT_DIGIT+ }
literal_int_hex = { "0x" ~ ASCII_HEX_DIGIT+ }
literal_int_dec = { literal_int_dec_val ~ metadata? }
literal_int_dec_val = { "-"? ~ ASCII_DIGIT+ }
metadata = {
	"<" ~
	buffer_byte+ ~
	">" ~
	(
		"(" ~
		ASCII_ALPHA_LOWER+ ~
		")"
	)?
}

struct = {
	"{" ~
	(
		struct_member ~
		(", " ~ struct_member)*
	)? ~
	", ..."? ~
	"}"
}
struct_member = {
	named_affectation |
	macro
}

buffer = {
	"@"? ~
	"\"" ~
	(
		buffer_byte+ |
		buffer_char+
	)? ~
	"\"" ~
	"..."?
}
buffer_char = { !"\"" ~ ANY }
buffer_byte = { "\\x" ~ ASCII_HEX_DIGIT{2} }

macro = { symbol_name ~ "(" ~  macro_arguments ~ ")" }
macro_arguments = { (macro_argument ~ (", " ~ macro_argument)*)? }
macro_argument = {
	pseudo_addr |
	expression
}
pseudo_addr = { "&" ~ symbol_name }

array = { "[" ~ (expression ~ (", " ~ expression)*)? ~ "]" }

set = {
	"~"? ~
	"[" ~
	(
		int ~
		(
			" " ~
			int
		)*
	)? ~
	"]"
}
